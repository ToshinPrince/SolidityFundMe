{
  "address": "0xA80414a2CFf32B841e665c393979ea6F48d31dCe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUN_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x93912ea1dc706ceb36cf96e0c3c5fd9a85cb7ede727b1fcf116f5b9b6eeb9223",
  "receipt": {
    "to": null,
    "from": "0x1518Cc63642F6a9a4c00a51b265d773E2096c6e3",
    "contractAddress": "0xA80414a2CFf32B841e665c393979ea6F48d31dCe",
    "transactionIndex": 58,
    "gasUsed": "1022210",
    "logsBloom": "0x
    "blockHash": "0xdbedb63089f867c7bd12f1011db6d23946e83da3a139bd36efd8fd75d4b64939",
    "transactionHash": "0x93912ea1dc706ceb36cf96e0c3c5fd9a85cb7ede727b1fcf116f5b9b6eeb9223",
    "logs": [],
    "blockNumber": 4488141,
    "cumulativeGasUsed": "9694171",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "080dd928381170e380201427a54a9f78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUN_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Toshin Prince\",\"details\":\"This Implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This Implements price feeds as our library\"}},\"title\":\"A Contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo sample Funding Contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//pragma\\npragma solidity ^0.8.8;\\n//Imports\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n//Error Codes\\nerror FundMe__NotOwner(); //error helps save gas\\n\\n//Interfaces, Libraries, Contracts\\n\\n/**\\n * @title A Contract for crowd funding\\n * @author Toshin Prince\\n * @notice This contract is to demo sample Funding Contract\\n * @dev This Implements price feeds as our library\\n */\\ncontract FundMe {\\n    //Type Declarations\\n    using PriceConverter for uint256;\\n\\n    //State Variables\\n    // constant can not be changed - done for gas efficiency\\n    uint256 public constant MINIMUN_USD = 50 * 1e18; //1 * 10 ** 18\\n    // This array is tracking contributors addresses\\n    address[] private s_funders;\\n    //This mapping tracks the amount of contributions made by different Ethereum addresses.\\n    //s is apended for storage variable - just to have idea that storage is going to cost more\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    // immutable can only be set once, here it will hammen in constructor - done for gas efficiency\\n    address private immutable i_owner;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(i_owner == msg.sender, \\\"Not the owner\\\");\\n\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner(); //error helps save gas\\n        }\\n        _;\\n    }\\n\\n    //Functions Order\\n    // //constructor\\n    // //receive\\n    // //fallback\\n    // //external\\n    // //public\\n    // //intrenal\\n    // //private\\n    // //view/pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This Implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            // getConversionRate(msg.value) -> now we have transfered getConversionRate to library, so below code is valid.\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUN_USD,\\n            \\\"Didn't Send Enough ETH\\\"\\n        ); //1e18 == 1 * 10 ** 18 == 1000000000000000000\\n        //18 decimals\\n        //Pushing funder address to the Array\\n        s_funders.push(msg.sender);\\n        //Mapping amount of ETH to address\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        //reset the array\\n        //2 way -> 1) loop through, each array index and set it 0\\n        //2) given below\\n        s_funders = new address[](0);\\n\\n        // // There are 3 ways to withdraw(transfer, send & call)\\n        // //1)transfer -> msg.sender = address, payable(msg.sender) = payable address\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send Failed\\\");\\n        //call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        //mappings can't be en memory\\n\\n        for (\\n            uint256 fundersIndex = 0;\\n            fundersIndex < funders.length;\\n            fundersIndex++\\n        ) {\\n            address funder = funders[fundersIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    //view/pure\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x87b361709558528841fdec28279432271f0c72d3c12a585d8a6b87513e93473b\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n//Library\\n//Libraries are similar to contracts, but you can't declare any state variable and you can't send ether.\\n//A library is embedded into the contract if all library functions are internal.\\n//Otherwise the library must be deployed and then linked before the contract is deployed.\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // //ABI\\n        // // ADDRESS(ETH/USD -Goreli) - 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        //ETH in terms of USD\\n        //3000.00000000 - 8 Decimals\\n        //where ether has 18 decimals, so we convert this USD to 18 decimals by *1e10(1**10)\\n        return uint256(price * 1e10); //1**10 == 10000000000\\n    }\\n\\n    // //Don't need this function for this particular contract, which we are using this Library for\\n    // function getVersion() internal view returns (uint256) {\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n    //         0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n    //     );\\n    //     return priceFeed.version();\\n    // }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x90858d2841c8573a405d60b5e1909e64e723c21e0af0a8e6a4b8393c6ce7bdb6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200129e3803806200129e833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61111f6200017f6000396000818161034c0152818161058e01526105de015261111f6000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780632100f479146100d55780633ccfd60b14610100578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aad565b6102f4565b6040516100cc9190610af3565b60405180910390f35b3480156100e157600080fd5b506100ea61033d565b6040516100f79190610af3565b60405180910390f35b34801561010c57600080fd5b5061011561034a565b005b34801561012357600080fd5b5061012c61058a565b6040516101399190610b1d565b60405180910390f35b34801561014e57600080fd5b506101576105b2565b6040516101649190610b97565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c6105dc565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610bde565b610880565b6040516101c29190610b1d565b60405180910390f35b6802b5e3af16b188000061020a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c790919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610c68565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103cf576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561047a5760008082815481106103f4576103f3610c88565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061047290610ce6565b9150506103d2565b50600067ffffffffffffffff81111561049657610495610d2f565b5b6040519080825280602002602001820160405280156104c45781602001602082028036833780820191505090505b50600090805190602001906104da9291906109a3565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161050190610d8f565b60006040518083038185875af1925050503d806000811461053e576040519150601f19603f3d011682016040523d82523d6000602084013e610543565b606091505b5050905080610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057e90610df0565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610661576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106e457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161069a575b5050505050905060005b815181101561076f57600082828151811061070c5761070b610c88565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076790610ce6565b9150506106ee565b50600067ffffffffffffffff81111561078b5761078a610d2f565b5b6040519080825280602002602001820160405280156107b95781602001602082028036833780820191505090505b50600090805190602001906107cf9291906109a3565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107f690610d8f565b60006040518083038185875af1925050503d8060008114610833576040519150601f19603f3d011682016040523d82523d6000602084013e610838565b606091505b505090508061087c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087390610df0565b60405180910390fd5b5050565b600080828154811061089557610894610c88565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108d383610903565b90506000670de0b6b3a764000085836108ec9190610e10565b6108f69190610e99565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094c57600080fd5b505afa158015610960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109849190610f57565b5050509150506402540be4008161099b9190610fd2565b915050919050565b828054828255906000526020600020908101928215610a1c579160200282015b82811115610a1b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c3565b5b509050610a299190610a2d565b5090565b5b80821115610a46576000816000905550600101610a2e565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7a82610a4f565b9050919050565b610a8a81610a6f565b8114610a9557600080fd5b50565b600081359050610aa781610a81565b92915050565b600060208284031215610ac357610ac2610a4a565b5b6000610ad184828501610a98565b91505092915050565b6000819050919050565b610aed81610ada565b82525050565b6000602082019050610b086000830184610ae4565b92915050565b610b1781610a6f565b82525050565b6000602082019050610b326000830184610b0e565b92915050565b6000819050919050565b6000610b5d610b58610b5384610a4f565b610b38565b610a4f565b9050919050565b6000610b6f82610b42565b9050919050565b6000610b8182610b64565b9050919050565b610b9181610b76565b82525050565b6000602082019050610bac6000830184610b88565b92915050565b610bbb81610ada565b8114610bc657600080fd5b50565b600081359050610bd881610bb2565b92915050565b600060208284031215610bf457610bf3610a4a565b5b6000610c0284828501610bc9565b91505092915050565b600082825260208201905092915050565b7f4469646e27742053656e6420456e6f7567682045544800000000000000000000600082015250565b6000610c52601683610c0b565b9150610c5d82610c1c565b602082019050919050565b60006020820190508181036000830152610c8181610c45565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cf182610ada565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d2457610d23610cb7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d79600083610d5e565b9150610d8482610d69565b600082019050919050565b6000610d9a82610d6c565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610dda600b83610c0b565b9150610de582610da4565b602082019050919050565b60006020820190508181036000830152610e0981610dcd565b9050919050565b6000610e1b82610ada565b9150610e2683610ada565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5f57610e5e610cb7565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ea482610ada565b9150610eaf83610ada565b925082610ebf57610ebe610e6a565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ee981610eca565b8114610ef457600080fd5b50565b600081519050610f0681610ee0565b92915050565b6000819050919050565b610f1f81610f0c565b8114610f2a57600080fd5b50565b600081519050610f3c81610f16565b92915050565b600081519050610f5181610bb2565b92915050565b600080600080600060a08688031215610f7357610f72610a4a565b5b6000610f8188828901610ef7565b9550506020610f9288828901610f2d565b9450506040610fa388828901610f42565b9350506060610fb488828901610f42565b9250506080610fc588828901610ef7565b9150509295509295909350565b6000610fdd82610f0c565b9150610fe883610f0c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102757611026610cb7565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106457611063610cb7565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110a1576110a0610cb7565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110de576110dd610cb7565b5b82820290509291505056fea26469706673582212202b088c0b2fcc054f3417d29994a703302a31545842c671b601ea7f3187bfb7b964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780632100f479146100d55780633ccfd60b14610100578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aad565b6102f4565b6040516100cc9190610af3565b60405180910390f35b3480156100e157600080fd5b506100ea61033d565b6040516100f79190610af3565b60405180910390f35b34801561010c57600080fd5b5061011561034a565b005b34801561012357600080fd5b5061012c61058a565b6040516101399190610b1d565b60405180910390f35b34801561014e57600080fd5b506101576105b2565b6040516101649190610b97565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c6105dc565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610bde565b610880565b6040516101c29190610b1d565b60405180910390f35b6802b5e3af16b188000061020a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c790919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610c68565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103cf576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561047a5760008082815481106103f4576103f3610c88565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061047290610ce6565b9150506103d2565b50600067ffffffffffffffff81111561049657610495610d2f565b5b6040519080825280602002602001820160405280156104c45781602001602082028036833780820191505090505b50600090805190602001906104da9291906109a3565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161050190610d8f565b60006040518083038185875af1925050503d806000811461053e576040519150601f19603f3d011682016040523d82523d6000602084013e610543565b606091505b5050905080610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057e90610df0565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610661576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106e457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161069a575b5050505050905060005b815181101561076f57600082828151811061070c5761070b610c88565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076790610ce6565b9150506106ee565b50600067ffffffffffffffff81111561078b5761078a610d2f565b5b6040519080825280602002602001820160405280156107b95781602001602082028036833780820191505090505b50600090805190602001906107cf9291906109a3565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107f690610d8f565b60006040518083038185875af1925050503d8060008114610833576040519150601f19603f3d011682016040523d82523d6000602084013e610838565b606091505b505090508061087c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087390610df0565b60405180910390fd5b5050565b600080828154811061089557610894610c88565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108d383610903565b90506000670de0b6b3a764000085836108ec9190610e10565b6108f69190610e99565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094c57600080fd5b505afa158015610960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109849190610f57565b5050509150506402540be4008161099b9190610fd2565b915050919050565b828054828255906000526020600020908101928215610a1c579160200282015b82811115610a1b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c3565b5b509050610a299190610a2d565b5090565b5b80821115610a46576000816000905550600101610a2e565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7a82610a4f565b9050919050565b610a8a81610a6f565b8114610a9557600080fd5b50565b600081359050610aa781610a81565b92915050565b600060208284031215610ac357610ac2610a4a565b5b6000610ad184828501610a98565b91505092915050565b6000819050919050565b610aed81610ada565b82525050565b6000602082019050610b086000830184610ae4565b92915050565b610b1781610a6f565b82525050565b6000602082019050610b326000830184610b0e565b92915050565b6000819050919050565b6000610b5d610b58610b5384610a4f565b610b38565b610a4f565b9050919050565b6000610b6f82610b42565b9050919050565b6000610b8182610b64565b9050919050565b610b9181610b76565b82525050565b6000602082019050610bac6000830184610b88565b92915050565b610bbb81610ada565b8114610bc657600080fd5b50565b600081359050610bd881610bb2565b92915050565b600060208284031215610bf457610bf3610a4a565b5b6000610c0284828501610bc9565b91505092915050565b600082825260208201905092915050565b7f4469646e27742053656e6420456e6f7567682045544800000000000000000000600082015250565b6000610c52601683610c0b565b9150610c5d82610c1c565b602082019050919050565b60006020820190508181036000830152610c8181610c45565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cf182610ada565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d2457610d23610cb7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d79600083610d5e565b9150610d8482610d69565b600082019050919050565b6000610d9a82610d6c565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610dda600b83610c0b565b9150610de582610da4565b602082019050919050565b60006020820190508181036000830152610e0981610dcd565b9050919050565b6000610e1b82610ada565b9150610e2683610ada565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5f57610e5e610cb7565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ea482610ada565b9150610eaf83610ada565b925082610ebf57610ebe610e6a565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ee981610eca565b8114610ef457600080fd5b50565b600081519050610f0681610ee0565b92915050565b6000819050919050565b610f1f81610f0c565b8114610f2a57600080fd5b50565b600081519050610f3c81610f16565b92915050565b600081519050610f5181610bb2565b92915050565b600080600080600060a08688031215610f7357610f72610a4a565b5b6000610f8188828901610ef7565b9550506020610f9288828901610f2d565b9450506040610fa388828901610f42565b9350506060610fb488828901610f42565b9250506080610fc588828901610ef7565b9150509295509295909350565b6000610fdd82610f0c565b9150610fe883610f0c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102757611026610cb7565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106457611063610cb7565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110a1576110a0610cb7565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110de576110dd610cb7565b5b82820290509291505056fea26469706673582212202b088c0b2fcc054f3417d29994a703302a31545842c671b601ea7f3187bfb7b964736f6c63430008080033",
  "devdoc": {
    "author": "Toshin Prince",
    "details": "This Implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This Implements price feeds as our library"
      }
    },
    "title": "A Contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo sample Funding Contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}