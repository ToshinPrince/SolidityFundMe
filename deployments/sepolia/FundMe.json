{
  "address": "0x4F6E8658E7cD89FA8235bb229a9b0cf056F33F05",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUN_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xce1c6f1da7d6fa13e693c199ab75adbf2a59956d2bba1b40183d684c5a7f5a2b",
  "receipt": {
    "to": null,
    "from": "0x1518Cc63642F6a9a4c00a51b265d773E2096c6e3",
    "contractAddress": "0x4F6E8658E7cD89FA8235bb229a9b0cf056F33F05",
    "transactionIndex": 41,
    "gasUsed": "1058011",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x44ad298c4471195a8aa939e703a7218531a51a59f0fb221ea9f3db3f357fe4fc",
    "transactionHash": "0xce1c6f1da7d6fa13e693c199ab75adbf2a59956d2bba1b40183d684c5a7f5a2b",
    "logs": [],
    "blockNumber": 4517945,
    "cumulativeGasUsed": "6017653",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 3,
  "solcInputHash": "c91c18a2bbf1361a68022482deb71d0a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUN_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Toshin Prince\",\"details\":\"This Implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This Implements price feeds as our library\"}},\"title\":\"A Contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo sample Funding Contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//pragma\\npragma solidity ^0.8.8;\\n//Imports\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n//Error Codes\\nerror FundMe__NotOwner(); //error helps save gas\\n\\n//Interfaces, Libraries, Contracts\\n\\n/**\\n * @title A Contract for crowd funding\\n * @author Toshin Prince\\n * @notice This contract is to demo sample Funding Contract\\n * @dev This Implements price feeds as our library\\n */\\ncontract FundMe {\\n    //Type Declarations\\n    using PriceConverter for uint256;\\n\\n    //State Variables\\n    // constant can not be changed - done for gas efficiency\\n    uint256 public constant MINIMUN_USD = 50 * 10 ** 18; //1 * 10 ** 18\\n    // This array is tracking contributors addresses\\n    address[] private s_funders;\\n    //This mapping tracks the amount of contributions made by different Ethereum addresses.\\n    //s is apended for storage variable - just to have idea that storage is going to cost more\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    // immutable can only be set once, here it will hammen in constructor - done for gas efficiency\\n    address private immutable i_owner;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(i_owner == msg.sender, \\\"Not the owner\\\");\\n\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner(); //error helps save gas\\n        }\\n        _;\\n    }\\n\\n    //Functions Order\\n    // //constructor\\n    // //receive\\n    // //fallback\\n    // //external\\n    // //public\\n    // //intrenal\\n    // //private\\n    // //view/pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This Implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            // getConversionRate(msg.value) -> now we have transfered getConversionRate to library, so below code is valid.\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUN_USD,\\n            \\\"Didn't Send Enough ETH\\\"\\n        ); //1e18 == 1 * 10 ** 18 == 1000000000000000000\\n        //18 decimals\\n\\n        //Mapping amount of ETH to address\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        //Pushing funder address to the Array\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        //reset the array\\n        //2 way -> 1) loop through, each array index and set it 0\\n        //2) given below\\n        s_funders = new address[](0);\\n\\n        // // There are 3 ways to withdraw(transfer, send & call)\\n        // //1)transfer -> msg.sender = address, payable(msg.sender) = payable address\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send Failed\\\");\\n        //call\\n        // (bool callSuccess, ) = payable(msg.sender).call{\\n        //     value: address(this).balance\\n        // }(\\\"\\\");\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        //mappings can't be en memory\\n\\n        for (\\n            uint256 fundersIndex = 0;\\n            fundersIndex < funders.length;\\n            fundersIndex++\\n        ) {\\n            address funder = funders[fundersIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        // (bool callSuccess, ) = payable(msg.sender).call{\\n        //     value: address(this).balance\\n        // }(\\\"\\\");\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    //view/pure\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xe6f3c5607ea5a1f78284dfb32d70f0823e6b6f43b8ba14ee173a592dd07a18dc\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n//Library\\n//Libraries are similar to contracts, but you can't declare any state variable and you can't send ether.\\n//A library is embedded into the contract if all library functions are internal.\\n//Otherwise the library must be deployed and then linked before the contract is deployed.\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // //ABI\\n        // // ADDRESS(ETH/USD -Goreli) - 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        //ETH in terms of USD\\n        //3000.00000000 - 8 Decimals\\n        //where ether has 18 decimals, so we convert this USD to 18 decimals by *1e10(1**10)\\n        return uint256(price * 1e10); //1**10 == 10000000000\\n    }\\n\\n    // //Don't need this function for this particular contract, which we are using this Library for\\n    // function getVersion() internal view returns (uint256) {\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n    //         0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n    //     );\\n    //     return priceFeed.version();\\n    // }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x90858d2841c8573a405d60b5e1909e64e723c21e0af0a8e6a4b8393c6ce7bdb6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200135438038062001354833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111c76200018d6000396000818161035e015281816104f1015281816105c001528181610610015261080601526111c76000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780632100f479146100d55780633ccfd60b14610100578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aff565b610306565b6040516100cc9190610b45565b60405180910390f35b3480156100e157600080fd5b506100ea61034f565b6040516100f79190610b45565b60405180910390f35b34801561010c57600080fd5b5061011561035c565b005b34801561012357600080fd5b5061012c6105bc565b6040516101399190610b6f565b60405180910390f35b34801561014e57600080fd5b506101576105e4565b6040516101649190610be9565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c61060e565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610c30565b6108d2565b6040516101c29190610b6f565b60405180910390f35b6802b5e3af16b188000061020a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461091990919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610cba565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461029a9190610d09565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e1576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561048c57600080828154811061040657610405610d5f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061048490610d8e565b9150506103e4565b50600067ffffffffffffffff8111156104a8576104a7610dd7565b5b6040519080825280602002602001820160405280156104d65781602001602082028036833780820191505090505b50600090805190602001906104ec9291906109f5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161053390610e37565b60006040518083038185875af1925050503d8060008114610570576040519150601f19603f3d011682016040523d82523d6000602084013e610575565b606091505b50509050806105b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b090610e98565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610693576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561071657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106cc575b5050505050905060005b81518110156107a157600082828151811061073e5761073d610d5f565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061079990610d8e565b915050610720565b50600067ffffffffffffffff8111156107bd576107bc610dd7565b5b6040519080825280602002602001820160405280156107eb5781602001602082028036833780820191505090505b50600090805190602001906108019291906109f5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161084890610e37565b60006040518083038185875af1925050503d8060008114610885576040519150601f19603f3d011682016040523d82523d6000602084013e61088a565b606091505b50509050806108ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c590610e98565b60405180910390fd5b5050565b60008082815481106108e7576108e6610d5f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061092583610955565b90506000670de0b6b3a7640000858361093e9190610eb8565b6109489190610f41565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561099e57600080fd5b505afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d69190610fff565b5050509150506402540be400816109ed919061107a565b915050919050565b828054828255906000526020600020908101928215610a6e579160200282015b82811115610a6d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a15565b5b509050610a7b9190610a7f565b5090565b5b80821115610a98576000816000905550600101610a80565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610acc82610aa1565b9050919050565b610adc81610ac1565b8114610ae757600080fd5b50565b600081359050610af981610ad3565b92915050565b600060208284031215610b1557610b14610a9c565b5b6000610b2384828501610aea565b91505092915050565b6000819050919050565b610b3f81610b2c565b82525050565b6000602082019050610b5a6000830184610b36565b92915050565b610b6981610ac1565b82525050565b6000602082019050610b846000830184610b60565b92915050565b6000819050919050565b6000610baf610baa610ba584610aa1565b610b8a565b610aa1565b9050919050565b6000610bc182610b94565b9050919050565b6000610bd382610bb6565b9050919050565b610be381610bc8565b82525050565b6000602082019050610bfe6000830184610bda565b92915050565b610c0d81610b2c565b8114610c1857600080fd5b50565b600081359050610c2a81610c04565b92915050565b600060208284031215610c4657610c45610a9c565b5b6000610c5484828501610c1b565b91505092915050565b600082825260208201905092915050565b7f4469646e27742053656e6420456e6f7567682045544800000000000000000000600082015250565b6000610ca4601683610c5d565b9150610caf82610c6e565b602082019050919050565b60006020820190508181036000830152610cd381610c97565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d1482610b2c565b9150610d1f83610b2c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5457610d53610cda565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d9982610b2c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dcc57610dcb610cda565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e21600083610e06565b9150610e2c82610e11565b600082019050919050565b6000610e4282610e14565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e82600b83610c5d565b9150610e8d82610e4c565b602082019050919050565b60006020820190508181036000830152610eb181610e75565b9050919050565b6000610ec382610b2c565b9150610ece83610b2c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f0757610f06610cda565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f4c82610b2c565b9150610f5783610b2c565b925082610f6757610f66610f12565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f9181610f72565b8114610f9c57600080fd5b50565b600081519050610fae81610f88565b92915050565b6000819050919050565b610fc781610fb4565b8114610fd257600080fd5b50565b600081519050610fe481610fbe565b92915050565b600081519050610ff981610c04565b92915050565b600080600080600060a0868803121561101b5761101a610a9c565b5b600061102988828901610f9f565b955050602061103a88828901610fd5565b945050604061104b88828901610fea565b935050606061105c88828901610fea565b925050608061106d88828901610f9f565b9150509295509295909350565b600061108582610fb4565b915061109083610fb4565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110cf576110ce610cda565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561110c5761110b610cda565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561114957611148610cda565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561118657611185610cda565b5b82820290509291505056fea26469706673582212203173018db9e26460d94b26142f134351794f2236a9e7d1af82a2ccdee6ee6faa64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780632100f479146100d55780633ccfd60b14610100578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aff565b610306565b6040516100cc9190610b45565b60405180910390f35b3480156100e157600080fd5b506100ea61034f565b6040516100f79190610b45565b60405180910390f35b34801561010c57600080fd5b5061011561035c565b005b34801561012357600080fd5b5061012c6105bc565b6040516101399190610b6f565b60405180910390f35b34801561014e57600080fd5b506101576105e4565b6040516101649190610be9565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c61060e565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610c30565b6108d2565b6040516101c29190610b6f565b60405180910390f35b6802b5e3af16b188000061020a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461091990919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610cba565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461029a9190610d09565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e1576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561048c57600080828154811061040657610405610d5f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061048490610d8e565b9150506103e4565b50600067ffffffffffffffff8111156104a8576104a7610dd7565b5b6040519080825280602002602001820160405280156104d65781602001602082028036833780820191505090505b50600090805190602001906104ec9291906109f5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161053390610e37565b60006040518083038185875af1925050503d8060008114610570576040519150601f19603f3d011682016040523d82523d6000602084013e610575565b606091505b50509050806105b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b090610e98565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610693576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561071657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106cc575b5050505050905060005b81518110156107a157600082828151811061073e5761073d610d5f565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061079990610d8e565b915050610720565b50600067ffffffffffffffff8111156107bd576107bc610dd7565b5b6040519080825280602002602001820160405280156107eb5781602001602082028036833780820191505090505b50600090805190602001906108019291906109f5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161084890610e37565b60006040518083038185875af1925050503d8060008114610885576040519150601f19603f3d011682016040523d82523d6000602084013e61088a565b606091505b50509050806108ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c590610e98565b60405180910390fd5b5050565b60008082815481106108e7576108e6610d5f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061092583610955565b90506000670de0b6b3a7640000858361093e9190610eb8565b6109489190610f41565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561099e57600080fd5b505afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d69190610fff565b5050509150506402540be400816109ed919061107a565b915050919050565b828054828255906000526020600020908101928215610a6e579160200282015b82811115610a6d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a15565b5b509050610a7b9190610a7f565b5090565b5b80821115610a98576000816000905550600101610a80565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610acc82610aa1565b9050919050565b610adc81610ac1565b8114610ae757600080fd5b50565b600081359050610af981610ad3565b92915050565b600060208284031215610b1557610b14610a9c565b5b6000610b2384828501610aea565b91505092915050565b6000819050919050565b610b3f81610b2c565b82525050565b6000602082019050610b5a6000830184610b36565b92915050565b610b6981610ac1565b82525050565b6000602082019050610b846000830184610b60565b92915050565b6000819050919050565b6000610baf610baa610ba584610aa1565b610b8a565b610aa1565b9050919050565b6000610bc182610b94565b9050919050565b6000610bd382610bb6565b9050919050565b610be381610bc8565b82525050565b6000602082019050610bfe6000830184610bda565b92915050565b610c0d81610b2c565b8114610c1857600080fd5b50565b600081359050610c2a81610c04565b92915050565b600060208284031215610c4657610c45610a9c565b5b6000610c5484828501610c1b565b91505092915050565b600082825260208201905092915050565b7f4469646e27742053656e6420456e6f7567682045544800000000000000000000600082015250565b6000610ca4601683610c5d565b9150610caf82610c6e565b602082019050919050565b60006020820190508181036000830152610cd381610c97565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d1482610b2c565b9150610d1f83610b2c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5457610d53610cda565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d9982610b2c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dcc57610dcb610cda565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e21600083610e06565b9150610e2c82610e11565b600082019050919050565b6000610e4282610e14565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e82600b83610c5d565b9150610e8d82610e4c565b602082019050919050565b60006020820190508181036000830152610eb181610e75565b9050919050565b6000610ec382610b2c565b9150610ece83610b2c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f0757610f06610cda565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f4c82610b2c565b9150610f5783610b2c565b925082610f6757610f66610f12565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f9181610f72565b8114610f9c57600080fd5b50565b600081519050610fae81610f88565b92915050565b6000819050919050565b610fc781610fb4565b8114610fd257600080fd5b50565b600081519050610fe481610fbe565b92915050565b600081519050610ff981610c04565b92915050565b600080600080600060a0868803121561101b5761101a610a9c565b5b600061102988828901610f9f565b955050602061103a88828901610fd5565b945050604061104b88828901610fea565b935050606061105c88828901610fea565b925050608061106d88828901610f9f565b9150509295509295909350565b600061108582610fb4565b915061109083610fb4565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110cf576110ce610cda565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561110c5761110b610cda565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561114957611148610cda565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561118657611185610cda565b5b82820290509291505056fea26469706673582212203173018db9e26460d94b26142f134351794f2236a9e7d1af82a2ccdee6ee6faa64736f6c63430008080033",
  "devdoc": {
    "author": "Toshin Prince",
    "details": "This Implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This Implements price feeds as our library"
      }
    },
    "title": "A Contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo sample Funding Contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 77,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}