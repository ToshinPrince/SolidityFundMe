{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n//Get Funds from Users\n//Withdraw Funds\n//Set a minimum Funding value in USD\n\npragma solidity ^0.8.8;\nimport \"./PriceConverter.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nerror NotOwner(); //error helps save gas\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    // constant can not be changed - done for gas efficiency\n    uint256 public constant MINIMUN_USD = 50 * 1e18; //1 * 10 ** 18\n    // This array is tracking contributors addresses\n    address[] public funders;\n    //This mapping tracks the amount of contributions made by different Ethereum addresses.\n    mapping(address => uint256) public addressToAmountFunded;\n\n    // immutable can only be set once, here it will hammen in constructor - done for gas efficiency\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    modifier onlyOwner() {\n        // require(i_owner == msg.sender, \"Not the owner\");\n\n        if (msg.sender != i_owner) {\n            revert NotOwner(); //error helps save gas\n        }\n        _;\n    }\n\n    function fund() public payable {\n        require(\n            // getConversionRate(msg.value) -> now we have transfered getConversionRate to library, so below code is valid.\n            msg.value.getConversionRate(priceFeed) >= MINIMUN_USD,\n            \"Didn't Send Enough\"\n        ); //1e18 == 1 * 10 ** 18 == 1000000000000000000\n        //18 decimals\n        //Pushing funder address to the Array\n        funders.push(msg.sender);\n        //Mapping amount of ETH to address\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex > funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n\n        //reset the array\n        //2 way -> 1) loop through, each array index and set it 0\n        //2) given below\n        funders = new address[](0);\n\n        // // There are 3 ways to withdraw(transfer, send & call)\n        // //1)transfer -> msg.sender = address, payable(msg.sender) = payable address\n        // payable(msg.sender).transfer(address(this).balance);\n        // // send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Send Failed\");\n        //call\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call Failed\");\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n//Library\n//Libraries are similar to contracts, but you can't declare any state variable and you can't send ether.\n//A library is embedded into the contract if all library functions are internal.\n//Otherwise the library must be deployed and then linked before the contract is deployed.\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        // //ABI\n        // // ADDRESS(ETH/USD -Goreli) - 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        // );\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        //ETH in terms of USD\n        //3000.00000000 - 8 Decimals\n        //where ether has 18 decimals, so we convert this USD to 18 decimals by *1e10(1**10)\n        return uint256(price * 1e10); //1**10 == 10000000000\n    }\n\n    // //Don't need this function for this particular contract, which we are using this Library for\n    // function getVersion() internal view returns (uint256) {\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\n    //         0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    //     );\n    //     return priceFeed.version();\n    // }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}